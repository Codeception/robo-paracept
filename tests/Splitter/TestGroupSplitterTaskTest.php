<?php

namespace Tests\Codeception\Task\Splitter;

use Codeception\Task\Splitter\TestGroupSplitterTask;
use Codeception\Task\Splitter\TestsSplitterTrait;
use Consolidation\Log\Logger;
use InvalidArgumentException;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Console\Output\NullOutput;
use Symfony\Component\Finder\Finder;

/**
 * Class TestGroupSplitterTaskTest
 * @coversDefaultClass \Codeception\Task\Splitter\TestGroupSplitterTask
 */
class TestGroupSplitterTaskTest extends TestCase
{
    use TestsSplitterTrait;

    /**
     * @testdox Test that the excluded group is unique in the array
     * @covers ::getExcludedGroups
     * @covers ::groupExcluded
     */
    public function testGetExcludedGroups(): void
    {
        $groupsToAdd = [
            'foo',
            'bar',
            'baz',
            'foo',
            'Foo',
            'baZ',
        ];

        $expected = [
            'foo',
            'bar',
            'baz',
            'Foo',
            'baZ',
        ];

        $groupTo = TEST_PATH . '/result/group_';
        $task = new TestGroupSplitterTask(5);
        $task->setLogger(new Logger(new NullOutput()));
        $task
            ->testsFrom(TEST_PATH . '/fixtures/')
            ->groupsTo($groupTo);

        foreach ($groupsToAdd as $group) {
            $task->groupExcluded($group);
        }

        $this->assertSame($expected, $task->getExcludedGroups());
    }

    /**
     * @covers ::getIncludedGroups
     * @covers ::groupIncluded
     */
    public function testGetIncludedGroups(): void
    {
        $groupsToAdd = [
            'foo',
            'bar',
            'baz',
            'foo',
            'Foo',
            'baZ',
        ];

        $expected = [
            'foo',
            'bar',
            'baz',
            'Foo',
            'baZ',
        ];

        $groupTo = TEST_PATH . '/result/group_';
        $task = new TestGroupSplitterTask(5);
        $task->setLogger(new Logger(new NullOutput()));
        $task
            ->testsFrom(TEST_PATH . '/fixtures/')
            ->groupsTo($groupTo);

        foreach ($groupsToAdd as $group) {
            $task->groupIncluded($group);
        }

        $this->assertSame($expected, $task->getIncludedGroups());
    }

    /**
     * @covers ::groupIncluded
     * @covers ::groupExcluded
     */
    public function testDoNotAddGroupToIncludedAndExcluded(): void
    {
        $groupTo = TEST_PATH . '/result/group_';
        $task = new TestGroupSplitterTask(5);
        $task->setLogger(new Logger(new NullOutput()));
        $task
            ->testsFrom(TEST_PATH . '/fixtures/')
            ->groupsTo($groupTo)
            ->groupIncluded('foo');
        $this->expectException(InvalidArgumentException::class);
        $this->expectErrorMessageMatches(
            '/^You can mark group "\w+" only as included OR excluded.$/'
        );
        $task->groupExcluded('foo');
    }

    /**
     * @covers ::groupIncluded
     * @covers ::groupExcluded
     */
    public function testDoNotAddGroupToExcludedAndIncluded(): void
    {
        $groupTo = TEST_PATH . '/result/group_';
        $task = new TestGroupSplitterTask(5);
        $task->setLogger(new Logger(new NullOutput()));
        $task
            ->testsFrom(TEST_PATH . '/fixtures/')
            ->groupsTo($groupTo)
            ->groupExcluded('bar');
        $this->expectException(InvalidArgumentException::class);
        $this->expectErrorMessageMatches(
            '/^You can mark group "\w+" only as included OR excluded.$/'
        );
        $task->groupIncluded('bar');
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $finder = Finder::create()
            ->files()
            ->name('group_*');

        foreach ($finder->in(TEST_PATH . '/result') as $file) {
            unlink($file->getPathname());
        }
    }

    /**
     * @covers ::run
     */
    public function testRun(): void
    {
        $from = TEST_PATH . '/fixtures/Cests/';
        $to = TEST_PATH . '/result/group_';
        $task = new TestGroupSplitterTask(5);
        $task->setLogger(new Logger(new NullOutput()));
        $task
            ->testsFrom($from)
            ->groupsTo($to)
            ->groupIncluded('foo')
            ->groupIncluded('bar')
            ->groupExcluded('no')
            ->run();

        $this->assertCount(1, []);
    }
}
